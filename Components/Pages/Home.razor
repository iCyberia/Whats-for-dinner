@page "/"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using MenuAppBlazor.Models
@inject MenuAppBlazor.Data.MenuContext Db // Inject DbContext

<PageTitle>Home</PageTitle>

<h1>What's for Dinner Dashboard</h1>

<!-- Add Pick Tonight's Dinner button -->
<button class="btn btn-outline-success mb-3 mt-3" @onclick="PickTonightDinner">
    Pick Tonight's Dinner
</button>

<!-- Add space for displaying the picked dish -->
@if (selectedDish != null)
{
    <div class="alert alert-light border p-3">
        <strong>How about this dish for tonight?</strong>
        <h5>@selectedDish.Name</h5>
        <div class="mt-2">
            <button class="btn btn-success" @onclick="EatIt">Eat it</button>
            <button class="btn btn-danger" @onclick="NotToday">Not today</button>
        </div>
    </div>
}

@code {
    private Dish? selectedDish; // This will hold the randomly selected dish

    // This method triggers the random selection of a dish
    private async Task PickTonightDinner()
    {
        var upcomingMenu = await Db.UpcomingMenu.Include(u => u.Dish).ToListAsync();

        // If there are dishes available, pick a random one
        if (upcomingMenu.Any())
        {
            var rng = new Random();
            selectedDish = upcomingMenu[rng.Next(upcomingMenu.Count)].Dish;
        }
        else
        {
            selectedDish = null; // No dishes available
        }
    }

    // Eat the selected dish and remove it from the menu
    private async Task EatIt()
    {
        if (selectedDish != null)
        {
            var itemToRemove = await Db.UpcomingMenu.FirstOrDefaultAsync(u => u.DishId == selectedDish.Id);
            if (itemToRemove != null)
            {
                Db.UpcomingMenu.Remove(itemToRemove);
                await Db.SaveChangesAsync();
            }

            // Reset selected dish after eating
            selectedDish = null;
        }
    }

    // Reset the selection without making any changes
    private async Task NotToday()
    {
        // Reset the selected dish to null and allow for a new selection
        selectedDish = null;

        // Ensure we can select a new dish after clicking "Not today"
        await PickTonightDinner();
    }
}
